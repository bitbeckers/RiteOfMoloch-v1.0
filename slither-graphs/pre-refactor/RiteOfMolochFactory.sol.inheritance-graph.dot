digraph "" {
Initializable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Initializable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _disableInitializers()</TD></TR><TR><TD align="left">    _getInitializedVersion()</TD></TR><TR><TD align="left">    _isInitializing()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    initializer()</TD></TR><TR><TD align="left">    reinitializer(uint8)</TD></TR><TR><TD align="left">    onlyInitializing()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _initialized</TD></TR><TR><TD align="left">    _initializing</TD></TR></TABLE> >];

ERC721Upgradeable -> Initializable [ label="1" ];
ERC721Upgradeable -> ContextUpgradeable [ label="2" ];
ERC721Upgradeable -> ERC165Upgradeable [ label="3" ];
ERC721Upgradeable -> IERC721Upgradeable [ label="4" ];
ERC721Upgradeable -> IERC721MetadataUpgradeable [ label="5" ];
ERC721Upgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC721Upgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    balanceOf(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    ownerOf(uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    name()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    symbol()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    tokenURI(uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    approve(address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    getApproved(uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    setApprovalForAll(address,bool)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    isApprovedForAll(address,address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    transferFrom(address,address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    safeTransferFrom(address,address,uint256)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    safeTransferFrom(address,address,uint256,bytes)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __ERC721_init(string,string)</TD></TR><TR><TD align="left">    __ERC721_init_unchained(string,string)</TD></TR><TR><TD align="left">    _baseURI()</TD></TR><TR><TD align="left">    _safeTransfer(address,address,uint256,bytes)</TD></TR><TR><TD align="left">    _ownerOf(uint256)</TD></TR><TR><TD align="left">    _exists(uint256)</TD></TR><TR><TD align="left">    _isApprovedOrOwner(address,uint256)</TD></TR><TR><TD align="left">    _safeMint(address,uint256)</TD></TR><TR><TD align="left">    _safeMint(address,uint256,bytes)</TD></TR><TR><TD align="left">    _mint(address,uint256)</TD></TR><TR><TD align="left">    _burn(uint256)</TD></TR><TR><TD align="left">    _transfer(address,address,uint256)</TD></TR><TR><TD align="left">    _approve(address,uint256)</TD></TR><TR><TD align="left">    _setApprovalForAll(address,address,bool)</TD></TR><TR><TD align="left">    _requireMinted(uint256)</TD></TR><TR><TD align="left">    _checkOnERC721Received(address,address,uint256,bytes)</TD></TR><TR><TD align="left">    _beforeTokenTransfer(address,address,uint256,uint256)</TD></TR><TR><TD align="left">    _afterTokenTransfer(address,address,uint256,uint256)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _name</TD></TR><TR><TD align="left">    _symbol</TD></TR><TR><TD align="left">    _owners</TD></TR><TR><TD align="left">    _balances</TD></TR><TR><TD align="left">    _tokenApprovals</TD></TR><TR><TD align="left">    _operatorApprovals</TD></TR><TR><TD align="left"><font color="red">    __gap</font></TD></TR></TABLE> >];

IERC721ReceiverUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC721ReceiverUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    onERC721Received(address,address,uint256,bytes)</TD></TR></TABLE> >];

IERC721Upgradeable -> IERC165Upgradeable;
IERC721Upgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC721Upgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    ownerOf(uint256)</TD></TR><TR><TD align="left">    safeTransferFrom(address,address,uint256,bytes)</TD></TR><TR><TD align="left">    safeTransferFrom(address,address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    setApprovalForAll(address,bool)</TD></TR><TR><TD align="left">    getApproved(uint256)</TD></TR><TR><TD align="left">    isApprovedForAll(address,address)</TD></TR></TABLE> >];

IERC721MetadataUpgradeable -> IERC721Upgradeable;
IERC721MetadataUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC721MetadataUpgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    tokenURI(uint256)</TD></TR></TABLE> >];

AddressUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>AddressUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    isContract(address)</TD></TR><TR><TD align="left">    sendValue(address,uint256)</TD></TR><TR><TD align="left">    functionCall(address,bytes)</TD></TR><TR><TD align="left">    functionCall(address,bytes,string)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256)</TD></TR><TR><TD align="left">    functionCallWithValue(address,bytes,uint256,string)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes)</TD></TR><TR><TD align="left">    functionStaticCall(address,bytes,string)</TD></TR><TR><TD align="left">    verifyCallResultFromTarget(address,bool,bytes,string)</TD></TR><TR><TD align="left">    verifyCallResult(bool,bytes,string)</TD></TR><TR><TD align="left">    _revert(bytes,string)</TD></TR></TABLE> >];

ContextUpgradeable -> Initializable;
ContextUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ContextUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __Context_init()</TD></TR><TR><TD align="left">    __Context_init_unchained()</TD></TR><TR><TD align="left">    _msgSender()</TD></TR><TR><TD align="left">    _msgData()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    __gap</TD></TR></TABLE> >];

CountersUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>CountersUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    current(CountersUpgradeable.Counter)</TD></TR><TR><TD align="left">    increment(CountersUpgradeable.Counter)</TD></TR><TR><TD align="left">    decrement(CountersUpgradeable.Counter)</TD></TR><TR><TD align="left">    reset(CountersUpgradeable.Counter)</TD></TR></TABLE> >];

StringsUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>StringsUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    toString(uint256)</TD></TR><TR><TD align="left">    toHexString(uint256)</TD></TR><TR><TD align="left">    toHexString(uint256,uint256)</TD></TR><TR><TD align="left">    toHexString(address)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _SYMBOLS</TD></TR><TR><TD align="left">    _ADDRESS_LENGTH</TD></TR></TABLE> >];

ERC165Upgradeable -> Initializable [ label="1" ];
ERC165Upgradeable -> IERC165Upgradeable [ label="2" ];
ERC165Upgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ERC165Upgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    __ERC165_init()</TD></TR><TR><TD align="left">    __ERC165_init_unchained()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    __gap</TD></TR></TABLE> >];

IERC165Upgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC165Upgradeable</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    supportsInterface(bytes4)</TD></TR></TABLE> >];

MathUpgradeable[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>MathUpgradeable</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    max(uint256,uint256)</TD></TR><TR><TD align="left">    min(uint256,uint256)</TD></TR><TR><TD align="left">    average(uint256,uint256)</TD></TR><TR><TD align="left">    ceilDiv(uint256,uint256)</TD></TR><TR><TD align="left">    mulDiv(uint256,uint256,uint256)</TD></TR><TR><TD align="left">    mulDiv(uint256,uint256,uint256,MathUpgradeable.Rounding)</TD></TR><TR><TD align="left">    sqrt(uint256)</TD></TR><TR><TD align="left">    sqrt(uint256,MathUpgradeable.Rounding)</TD></TR><TR><TD align="left">    log2(uint256)</TD></TR><TR><TD align="left">    log2(uint256,MathUpgradeable.Rounding)</TD></TR><TR><TD align="left">    log10(uint256)</TD></TR><TR><TD align="left">    log10(uint256,MathUpgradeable.Rounding)</TD></TR><TR><TD align="left">    log256(uint256)</TD></TR><TR><TD align="left">    log256(uint256,MathUpgradeable.Rounding)</TD></TR></TABLE> >];

Clones[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Clones</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    clone(address)</TD></TR><TR><TD align="left">    cloneDeterministic(address,bytes32)</TD></TR><TR><TD align="left">    predictDeterministicAddress(address,bytes32,address)</TD></TR><TR><TD align="left">    predictDeterministicAddress(address,bytes32)</TD></TR></TABLE> >];

IERC20[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IERC20</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >];

RiteOfMoloch -> IInitData [ label="1" ];
RiteOfMoloch -> ERC721Upgradeable [ label="2" ];
RiteOfMoloch -> HatsAccessControl [ label="3" ];
RiteOfMoloch -> IRiteOfMoloch [ label="4" ];
RiteOfMoloch[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>RiteOfMoloch</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    initialize(IInitData.InitData,address,address)</TD></TR><TR><TD align="left">    joinInitiation(address)</TD></TR><TR><TD align="left">    claimStake()</TD></TR><TR><TD align="left">    cryForHelp(string)</TD></TR><TR><TD align="left">    checkStake(address)</TD></TR><TR><TD align="left">    changeJoinTimeDuration(uint256)</TD></TR><TR><TD align="left">    extendJoinTimeLimit(uint256)</TD></TR><TR><TD align="left">    changeJoinSizeLimit(uint256)</TD></TR><TR><TD align="left">    setMinimumStake(uint256)</TD></TR><TR><TD align="left">    setShareThreshold(uint256)</TD></TR><TR><TD align="left">    setMaxDuration(uint256)</TD></TR><TR><TD align="left">    batchMintBaalShares(address[])</TD></TR><TR><TD align="left">    singleMintBaalShares(address)</TD></TR><TR><TD align="left">    sacrifice()</TD></TR><TR><TD align="left">    getDeadline(address)</TD></TR><TR><TD align="left">    isMember(address)</TD></TR><TR><TD align="left"><font color="#FFA500">    supportsInterface(bytes4)</font></TD></TR><TR><TD align="left">    initializeHatTree(address,address,address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _setMinimumStake(uint256)</TD></TR><TR><TD align="left">    _setShareThreshold(uint256)</TD></TR><TR><TD align="left">    _setMaxDuration(uint256)</TD></TR><TR><TD align="left">    _setBaseUri(string)</TD></TR><TR><TD align="left">    _stake(address)</TD></TR><TR><TD align="left">    _claim()</TD></TR><TR><TD align="left">    _soulBind(address)</TD></TR><TR><TD align="left">    _darkRitual()</TD></TR><TR><TD align="left">    _bloodLetting(address)</TD></TR><TR><TD align="left">    _bloodFeast(uint256)</TD></TR><TR><TD align="left">    _consolidateSurvivors()</TD></TR><TR><TD align="left">    _riseFromAshes()</TD></TR><TR><TD align="left">    _checkMember()</TD></TR><TR><TD align="left">    _checkManager()</TD></TR><TR><TD align="left"><font color="#FFA500">    _baseURI()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    _transfer(address,address,uint256)</font></TD></TR><TR><TD align="left">    _encodeShamanProposal(address,uint256)</TD></TR><TR><TD align="left">    _encodeHatProposal()</TD></TR><TR><TD align="left">    _encodeBuildHatTree(address,address,address)</TD></TR><TR><TD align="left">    _encodeMultiMetaTx(bytes[],address[])</TD></TR><TR><TD align="left">    _submitBaalProposal(bytes,bool)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    callerIsUser()</TD></TR><TR><TD align="left">    onlyMember()</TD></TR><TR><TD align="left">    onlyShaman()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left"><font color="red">    _roles</font></TD></TR><TR><TD align="left">    ADMIN</TD></TR><TR><TD align="left">    deadlines</TD></TR><TR><TD align="left">    totalSlash</TD></TR><TR><TD align="left"><font color="red">    baal</font><font color="blue" POINT-SIZE="10"> (IBaal)</font></TD></TR><TR><TD align="left">    cohortName</TD></TR><TR><TD align="left">    cohortSeason</TD></TR><TR><TD align="left">    cohortSize</TD></TR><TR><TD align="left">    cohortCounter</TD></TR><TR><TD align="left">    joinDuration</TD></TR><TR><TD align="left">    joinEndTime</TD></TR><TR><TD align="left">    minimumShare</TD></TR><TR><TD align="left">    minimumStake</TD></TR><TR><TD align="left">    maximumTime</TD></TR><TR><TD align="left">    treasury</TD></TR><TR><TD align="left"><font color="red">    HATS</font><font color="blue" POINT-SIZE="10"> (IHats)</font></TD></TR><TR><TD align="left">    topHat</TD></TR><TR><TD align="left">    adminHat</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    _staked</TD></TR><TR><TD align="left">    initiates</TD></TR><TR><TD align="left">    survivors</TD></TR><TR><TD align="left">    _tokenIdCounter</TD></TR><TR><TD align="left">    _sharesToken<font color="blue" POINT-SIZE="10"> (IERC20)</font></TD></TR><TR><TD align="left">    _token<font color="blue" POINT-SIZE="10"> (IERC20)</font></TD></TR><TR><TD align="left">    __baseURI</TD></TR><TR><TD align="left">    initHatTreeLock</TD></TR></TABLE> >];

RiteOfMolochFactory -> IInitData [ label="1" ];
RiteOfMolochFactory -> HatsAccessControl [ label="2" ];
RiteOfMolochFactory[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>RiteOfMolochFactory</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    createCohort(IInitData.InitData,uint256)</TD></TR><TR><TD align="left">    addImplementation(address)</TD></TR><TR><TD align="left">    changeHatsProtocol(address)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    FACTORY_OPERATOR</TD></TR><TR><TD align="left"><font color="red">    _roles</font></TD></TR><TR><TD align="left">    implementations</TD></TR><TR><TD align="left">    iid</TD></TR><TR><TD align="left">    hatsProtocol</TD></TR><TR><TD align="left">    factoryOperatorHat</TD></TR></TABLE> >];

IBaal[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IBaal</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    proposalOffering()</TD></TR><TR><TD align="left">    proposalCount()</TD></TR><TR><TD align="left">    avatar()</TD></TR><TR><TD align="left">    submitProposal(bytes,uint32,uint256,string)</TD></TR><TR><TD align="left">    sharesToken()</TD></TR><TR><TD align="left">    isManager(address)</TD></TR><TR><TD align="left">    mintShares(address[],uint256[])</TD></TR></TABLE> >];

HatsAccessControl -> ContextUpgradeable;
HatsAccessControl[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>HatsAccessControl</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    hasRole(bytes32,address)</TD></TR><TR><TD align="left">    hatsContract()</TD></TR><TR><TD align="left">    getRoleAdmin(bytes32)</TD></TR><TR><TD align="left">    grantRole(bytes32,uint256)</TD></TR><TR><TD align="left">    changeRoleHat(bytes32,uint256)</TD></TR><TR><TD align="left">    revokeRole(bytes32,uint256)</TD></TR><TR><TD align="left">    changeHatsContract(address)</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _checkRole(bytes32)</TD></TR><TR><TD align="left">    _checkRole(bytes32,address)</TD></TR><TR><TD align="left">    _changeHatsContract(address)</TD></TR><TR><TD align="left">    _changeRoleHat(bytes32,uint256)</TD></TR><TR><TD align="left">    _setRoleAdmin(bytes32,bytes32)</TD></TR><TR><TD align="left">    _grantRole(bytes32,uint256)</TD></TR><TR><TD align="left">    _revokeRole(bytes32,uint256)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyRole(bytes32)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    DEFAULT_ADMIN_ROLE</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    HATS<font color="blue" POINT-SIZE="10"> (IHats)</font></TD></TR><TR><TD align="left">    _roles</TD></TR></TABLE> >];

HatsErrors[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>HatsErrors</B></TD></TR></TABLE> >];

HatsEvents[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>HatsEvents</B></TD></TR></TABLE> >];

IHatsIdUtilities[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IHatsIdUtilities</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    buildHatId(uint256,uint8)</TD></TR><TR><TD align="left">    getHatLevel(uint256)</TD></TR><TR><TD align="left">    isTopHat(uint256)</TD></TR><TR><TD align="left">    getAdminAtLevel(uint256,uint8)</TD></TR><TR><TD align="left">    getTophatDomain(uint256)</TD></TR></TABLE> >];

IHats -> IHatsIdUtilities [ label="1" ];
IHats -> HatsErrors [ label="2" ];
IHats -> HatsEvents [ label="3" ];
IHats[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IHats</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    mintTopHat(address,string,string)</TD></TR><TR><TD align="left">    createHat(uint256,string,uint32,address,address,bool,string)</TD></TR><TR><TD align="left">    batchCreateHats(uint256[],string[],uint32[],address[],address[],bool[],string[])</TD></TR><TR><TD align="left">    getNextId(uint256)</TD></TR><TR><TD align="left">    mintHat(uint256,address)</TD></TR><TR><TD align="left">    batchMintHats(uint256[],address[])</TD></TR><TR><TD align="left">    setHatStatus(uint256,bool)</TD></TR><TR><TD align="left">    checkHatStatus(uint256)</TD></TR><TR><TD align="left">    setHatWearerStatus(uint256,address,bool,bool)</TD></TR><TR><TD align="left">    checkHatWearerStatus(uint256,address)</TD></TR><TR><TD align="left">    renounceHat(uint256)</TD></TR><TR><TD align="left">    transferHat(uint256,address,address)</TD></TR><TR><TD align="left">    makeHatImmutable(uint256)</TD></TR><TR><TD align="left">    changeHatDetails(uint256,string)</TD></TR><TR><TD align="left">    changeHatEligibility(uint256,address)</TD></TR><TR><TD align="left">    changeHatToggle(uint256,address)</TD></TR><TR><TD align="left">    changeHatImageURI(uint256,string)</TD></TR><TR><TD align="left">    changeHatMaxSupply(uint256,uint32)</TD></TR><TR><TD align="left">    viewHat(uint256)</TD></TR><TR><TD align="left">    isWearerOfHat(address,uint256)</TD></TR><TR><TD align="left">    isAdminOfHat(address,uint256)</TD></TR><TR><TD align="left">    isInGoodStanding(address,uint256)</TD></TR><TR><TD align="left">    isEligible(address,uint256)</TD></TR><TR><TD align="left">    getImageURIForHat(uint256)</TD></TR><TR><TD align="left">    balanceOf(address,uint256)</TD></TR><TR><TD align="left">    uri(uint256)</TD></TR></TABLE> >];

IInitData[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IInitData</B></TD></TR></TABLE> >];

IRiteOfMoloch[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>IRiteOfMoloch</B></TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    baal<font color="blue" POINT-SIZE="10"> (IBaal)</font></TD></TR><TR><TD align="left">    HATS</TD></TR></TABLE> >];

}